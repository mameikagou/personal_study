
// 继承属性
// JavaScript 对象是动态的属性“包”（指其自己的属性）。
// JavaScript 对象有一个指向一个原型对象的链。
// 当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，
// 还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，
// 直到找到一个名字匹配的属性或到达原型链的末尾。

let f = function(){
    this.a = 1;
    this.b = 2;
}

let o = new f();

// 在f的原型上定义属性
f.prototype.b = 4;
f.prototype.c = 9;

// o本身啥都没定义,但是当试图访问对象的属性的时候,不仅仅会在
//对象上搜寻,还会在对象的原型上面搜寻;
console.log(o.a);
console.log("属性屏蔽,后面的无法覆盖前面,所以结果是2不是4;结果:"+o.b);
console.log(o.c);


// 继承方法
// JavaScript 并没有其他基于类的语言所定义的“方法”。在 JavaScript 里，任何函数都可以添加到对象上作为对象的属性。函数的继承与其他的属性继承没有差别，包括上面的“属性遮蔽”（这种情况相当于其他语言的方法重写）。

// 当继承的函数被调用时，this 指向的是当前继承的对象，而不是继承的函数所在的原型对象。

